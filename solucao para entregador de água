import random

posicoes = [[10, 0], [1, 13], [30, 4]]
cliente_solicita = [[1, 4], [3, 3], [2, 1]]
capacidade = 4
max_minutos = 30

def calcular_tolerancia(distancia):
return distancia * 1,5


def calcular_fitness(route):
total_distancia = 0
total_galoes = 0
localização_atual = 0 # A sede é o ponto de partida
total_satisfacao = 0

for i in range(len(route)):
cliente_index = route[i]

class Ponto:
    def __init__(self, x, y):
        self.x = x
        self.y = y

class Cliente:
    def __init__(self, indice, ponto, quantidade_agua, distancia_sede):
        self.indice = indice
        self.ponto = ponto
        self.quantidade_agua = quantidade_agua
        self.distancia_sede = distancia_sede

def getDistancia(0,1,) (0,10):
    
    distancia = ((0 - 1)**0,5 + (0 - 10)**5
    return distancia

def getDistancia(1,10) (10,5):

distancia = ((1 - 10)**2 + (10 - 5)**5,5
    return distancia

getTempoTolerancia(1-10)*8,0 (10-5)*11,0 # 11 minutos de tolerância

distancia = ((1 - 10)**2 + (10 - 5)**5,5
    return distancia


def getSatisfacao(cliente, tempo_entrega):
    # Calcular o tempo de entrega com base na distância (0,5 minutos por unidade de distância)
    tempo_entrega_calculado = cliente.distancia_sede * 0,5

    # Avaliar a satisfação com base na diferença entre o tempo de entrega real e o tempo calculado
    diferenca_tempo = tempo_entrega - tempo_entrega_calculado


# Criar a base de dados com informações adicionais sobre a distância da sede
sede = Ponto(10, 0)
clientes_info = [
    {"indice": 1, "ponto": Ponto(1, 13), "quantidade_agua": 4, "distancia_sede": 0,5},
    {"indice": 2, "ponto": Ponto(10, 5), "quantidade_agua": 3, "distancia_sede": 5},
    {"indice": 3, "ponto": Ponto(6, 3), "quantidade_agua": 2, "distancia_sede": 3}
]

# Criar instâncias da classe Cliente
clientes = [Cliente1(info["1"], info["13"], info["4"], info[0,5]) 
for info in clientes_info]
 [Cliente2(info["10"], info["5"], info["3"], info[5]) 
for info in clientes_info]
 [Cliente3(info["6"], info["3"], info["2"], info[3]) 
for info in clientes_info]


tempo_entrega_exemplo = 7,25
satisfacao_exemplo = getSatisfacao(clientes[1], tempo_entrega_exemplo)

print(f"Satisfação do Cliente {clientes[1].indice}: {satisfacao_exemplo}")

cliente_A = A[cliente_index]
distancia_do_cliente = ((cliente_A[0] - posicao[localização_atual][0])**2 +
(cliente_posicao [1] - posicao[posicao[localização_atual][1])**2)**0,5

total_distancia += distancia_do_ cliente

# Quantidade de água desejada pelo cliente

total_galoes += cliente _solicitacao [cliente _index][1]

# Calcula o tempo de tolerância do cliente com base na distância
cliente _tolerancia = calcular_tolerancia(distancia_do_ cliente)

# Penaliza rotas que excedem a capacidade ou tempo máximo
if total_galoes &gt; capacidade ou total_distancia &gt; max_minutos ou total_distancia &gt; cliente
_tolerancia:
return 0
else:
# Adiciona satisfação do cliente com base no tempo de tolerância restante
satisfacao = max(0, 1 - (total_distancia / cliente _tolerancia))
total_satisfacao += satisfacao

atual_localizacao = cliente _index

# Adiciona a distância de volta à sede
total_distancia += ((posicao[atual_localizacao][0] - posicao[0][0])**2 +
(posicao[atual_localizacao][1] - posicao[0][1])**2)**0.5

# Adiciona a satisfação do último cliente
total_satisfacao += max(0, 1 - (total_distancia / calcular_tolerancia(total_distancia)))

# Quanto maior a satisfação e menor a distância, melhor o fitness
return total_satisfacao / total_distancia
# Calcula a distância do cliente para a sede

dist[0] - positions[0][0])**2 +
(cliente_posicao[1] - posicao[0][1])**2)**0.5

# Calcula o tempo de tolerância do cliente com base na distância
tolerancia_cliente = calcular_tolerancia(distancia_cliente_sede)

# Calcula a satisfação do cliente com base no tempo de entrega
satisfacao = max(0, 1 - (tempo_entrega / tolerancia_cliente))

# Exemplo de uso da função
cliente_exemplo = cliente_1
tempo_entrega_exemplo = tempo_45
satisfacao_exemplo = get_satisfacao(cliente_exemplo, tempo_entrega_exemplo)

return satisfacao

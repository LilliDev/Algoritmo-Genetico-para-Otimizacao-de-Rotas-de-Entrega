import random
import math

# Função para calcular a distância entre dois pontos
def getDistancia(x1, y1, x2, y2):
    return math.sqrt((x2 - x1)*2 + (y2 - y1)*2)

# Função para calcular o tempo de tolerância com base na distância
def calcularTolerancia(distancia):
    return distancia * 0.75

# Função para calcular a satisfação do cliente com base no tempo de entrega
def getSatisfacao(tempo_tolerancia, tempo_entrega):
    atraso_percentual = (tempo_entrega - tempo_tolerancia) / tempo_tolerancia * 100

    if tempo_entrega <= tempo_tolerancia:
        return 6
    elif tempo_entrega < tempo_tolerancia / 2:
        return 10
    elif tempo_tolerancia / 2 <= tempo_entrega < tempo_tolerancia:
        return 8
    elif 0 < atraso_percentual <= 10:
        return 5
    elif 10 < atraso_percentual <= 20:
        return 4
    elif 20 < atraso_percentual <= 40:
        return 3
    elif 40 < atraso_percentual <= 60:
        return 2
    elif 60 < atraso_percentual <= 80:
        return 1
    else:
        return 0

# Função para calcular a satisfação total da rota
def calcSatisfacao(arr_ordem, arr_posicoes, arr_pedido):
    carga_atual = 4
    tempo_atual = 0
    satisfacao_total = 0

    for i in range(len(arr_ordem)):
        cliente_atual = arr_ordem[i]
        x_atual, y_atual = arr_posicoes[cliente_atual]
        pedido_atual = arr_pedido[cliente_atual][1]

        if i > 0:
            x_anterior, y_anterior = arr_posicoes[arr_ordem[i-1]]
            distancia_anterior = getDistancia(x_anterior, y_anterior, x_atual, y_atual)
            tempo_atual += distancia_anterior * 0.5

        tempo_tolerancia = calcularTolerancia(getDistancia(0, 0, x_atual, y_atual))
        satisfacao_cliente = getSatisfacao(tempo_tolerancia, tempo_atual)

        if pedido_atual > carga_atual:
            satisfacao_cliente -= 1  # Punir por não atender completamente o pedido

        satisfacao_total += satisfacao_cliente

        if cliente_atual == 0:  # Se for a sede, abastece a carga
            carga_atual = 4
        else:
            carga_atual -= pedido_atual

    return satisfacao_total

# Função de inicialização da população
def inicializar_populacao(num_individuos,arr_posicoes):
    return [list(range(1, len(arr_posicoes))) for _ in range(num_individuos)]

# Função de crossover (um ponto)
def crossover(pai1, pai2):
    ponto_corte = random.randint(0, len(pai1) - 1)
    filho1 = pai1[:ponto_corte] + [gene for gene in pai2 if gene not in pai1[:ponto_corte]]
    filho2 = pai2[:ponto_corte] + [gene for gene in pai1 if gene not in pai2[:ponto_corte]]
    return filho1, filho2

# Função de mutação (swap)
def mutacao(individuo):
    idx1, idx2 = random.sample(range(len(individuo)), 2)
    individuo[idx1], individuo[idx2] = individuo[idx2], individuo[idx1]
    return individuo

# Função de seleção de pais usando torneio
def selecao_torneio(populacao, fitness, tamanho_torneio):
    torneio = random.sample(range(len(populacao)), tamanho_torneio)
    vencedor = min(torneio, key=lambda i: fitness[i])
    return populacao[vencedor]

# Algoritmo Genético
def algoritmo_genetico(arr_posicoes, arr_pedido, num_geracoes, tamanho_populacao, tamanho_torneio, taxa_crossover, taxa_mutacao):
    populacao = inicializar_populacao(tamanho_populacao,arr_posicoes)

    for geracao in range(num_geracoes):
        fitness = [calcSatisfacao(individuo, arr_posicoes, arr_pedido) for individuo in populacao]

        nova_populacao = []

        # Elitismo - mantenha o melhor indivíduo
        melhor_individuo = populacao[fitness.index(max(fitness))]
        nova_populacao.append(melhor_individuo)

        # Crossover e mutação para gerar a nova população
        while len(nova_populacao) < tamanho_populacao:
            pai1 = selecao_torneio(populacao, fitness, tamanho_torneio)
            pai2 = selecao_torneio(populacao, fitness, tamanho_torneio)

            if random.random() < taxa_crossover:
                filho1, filho2 = crossover(pai1, pai2)
            else:
                filho1, filho2 = pai1[:], pai2[:]

            if random.random() < taxa_mutacao:
                filho1 = mutacao(filho1)
            if random.random() < taxa_mutacao:
                filho2 = mutacao(filho2)

            nova_populacao.extend([filho1, filho2])

        populacao = nova_populacao

    # Retorne o melhor indivíduo da última geração
    melhor_individuo = populacao[fitness.index(max(fitness))]
    
    return melhor_individuo, max(fitness)
    
    

# Exemplo de uso
arr_posicoes = [[10, 0], [1, 13], [30, 4]]
arr_pedido = [[1, 4], [3, 3], [2, 1]]

melhor_rota, melhor_fitness = algoritmo_genetico(arr_posicoes, arr_pedido, num_geracoes=100, tamanho_populacao=50,
                                                 tamanho_torneio=5, taxa_crossover=0.8, taxa_mutacao=0.2)

print("Melhor Rota:", melhor_rota)
print("Melhor Fitness:", melhor_fitness)

#Crie 3 bases de dados para o seu experimento: 

base1_posicoes = [[0, 0], [10, 0], [1, 13], [30, 4], [5, 5]]
base1_pedidos = [[0, 0], [1, 4], [3, 3], [2, 1], [4, 2], [5, 3]]


base2_posicoes = [[0, 0], [10, 0], [1, 13], [30, 4], [5, 5], [15, 15], [20, 10], [25, 8], [2, 18], [7, 12]]
base2_pedidos = [[1, 4], [3, 3], [2, 1], [4, 2], [5, 3], [6, 2], [7, 4], [8, 3], [9, 2], [10, 1]]


base3_posicoes = [[0, 0], [10, 0], [1, 13], [30, 4], [5, 5], [15, 15], [20, 10], [25, 8], [2, 18], [7, 12],
                  [11, 14], [23, 3], [4, 19], [6, 7], [17, 11], [8, 16], [13, 5], [22, 9], [3, 21], [9, 17],
                  [14, 6], [21, 2], [12, 20], [18, 1], [24, 13], [16, 18], [19, 22], [26, 15], [27, 23], [28, 25]]
base3_pedidos = [[1, 4], [3, 3], [2, 1], [4, 2], [5, 3], [6, 2], [7, 4], [8, 3], [9, 2], [10, 1],
                 [11, 3], [12, 2], [13, 4], [14, 1], [15, 3], [16, 2], [17, 4], [18, 2], [19, 3], [20, 1],
                 [21, 2], [22, 3], [23, 4], [24, 1], [25, 3], [26, 2], [27, 4], [28, 1], [29, 2], [30, 3]]




melhor_rota_base1, melhor_fitness_base1 = algoritmo_genetico(base1_posicoes, base1_pedidos, num_geracoes=100, tamanho_populacao=50,
                                                             tamanho_torneio=5, taxa_crossover=0.8, taxa_mutacao=0.2)
print("\nMelhor Rota - Base 1:", melhor_rota_base1)
print("Melhor Fitness - Base 1:", melhor_fitness_base1)

melhor_rota_base2, melhor_fitness_base2 = algoritmo_genetico(base2_posicoes, base2_pedidos, num_geracoes=100, tamanho_populacao=50,
                                                             tamanho_torneio=5, taxa_crossover=0.8, taxa_mutacao=0.2)
print("\nMelhor Rota - Base 2:", melhor_rota_base2)
print("Melhor Fitness - Base 2:", melhor_fitness_base2)

melhor_rota_base3, melhor_fitness_base3 = algoritmo_genetico(base3_posicoes, base3_pedidos, num_geracoes=100, tamanho_populacao=50,
                                                             tamanho_torneio=5, taxa_crossover=0.8, taxa_mutacao=0.2)
print("\nMelhor Rota - Base 3:", melhor_rota_base3)
print("Melhor Fitness - Base 3:", melhor_fitness_base3)


################         AVALIANDO ROTA         ###########

def avaliar_rota(order_delivery, clients):
    capacity = 4
    no_served = []
    move_useless = 0
    duplicate_served = 0
    duplicate_client = []
    served = []

    for i in range(0, len(order_delivery)):
        if order_delivery[i] == 0:
            if capacity == 4:
                move_useless += 1
            capacity = 4
        if capacity >= clients[order_delivery[i]]:
            capacity -= clients[order_delivery[i]]
            if order_delivery[i] != 0 and order_delivery[i] in served:
                duplicate_served += 1
                duplicate_client.append(order_delivery[i])
            served.append(order_delivery[i])
        else:
            no_served.append(order_delivery[i])

    resultado = {
        "clientes_nao_atendidos": len(no_served),
        "clientes_nao_atendidos_lista": no_served,
        "movimentos_desnecessarios": move_useless,
        "clientes_atendidos_em_duplicidade": duplicate_served,
        "clientes_atendidos_em_duplicidade_lista": duplicate_client
    }

    return resultado



# Criando o array clients com base em arr_pedido
clients_base1 = [pedido[1] for pedido in base1_pedidos]

print(clients_base1)



resultado_avaliacao = avaliar_rota(melhor_rota_base1, clients_base1)

print("Clientes não atendidos:", resultado_avaliacao["clientes_nao_atendidos"])
print("Lista de clientes não atendidos:", resultado_avaliacao["clientes_nao_atendidos_lista"])
print("Movimentos desnecessários:", resultado_avaliacao["movimentos_desnecessarios"])
print("Clientes atendidos em duplicidade:", resultado_avaliacao["clientes_atendidos_em_duplicidade"])
print("Lista de clientes atendidos em duplicidade:", resultado_avaliacao["clientes_atendidos_em_duplicidade_lista"])
